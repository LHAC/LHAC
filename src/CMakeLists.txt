# find_package(BLAS)
# IF (NOT BLAS_FOUND)
# 	MESSAGE(FATAL_ERROR "BLAS library not found")
# ENDIF (NOT BLAS_FOUND)
IF (BLA_VENDOR STREQUAL "openblas")
	find_package(OpenBLAS REQUIRED)
	set (BLAS_LIB ${OpenBLAS_LIB})
ELSE (BLA_VENDOR STREQUAL "openblas")
	find_package(BLAS)
	IF (NOT BLAS_FOUND)
		find_package(OpenBLAS REQUIRED)
		set (BLAS_LIB ${OpenBLAS_LIB})
	ELSE (NOT BLAS_FOUND)
		set (BLAS_LIB ${BLAS_LIBRARIES})
	ENDIF (NOT BLAS_FOUND)
ENDIF (BLA_VENDOR STREQUAL "openblas")
# IF (NOT OpenBLAS_FOUND)
# 	MESSAGE(FATAL_ERROR "OpenBLAS library not found")
# ENDIF (NOT OpenBLAS_FOUND)

# find_package(LAPACK)


MESSAGE(STATUS "BLAS LIBRARIES: " ${BLAS_LIB})

# add_definitions(-DUSE_CBLAS)
# set (PROJECT_SOURCE_FILES drive.cpp Lasso.cpp LogReg.cpp)
# MESSAGE (STATUS "This is SOURCE files "${PROJECT_SOURCE_FILES})
# add_executable (lhac $(PROJECT_SOURCE_FILES))
add_executable (lhac drive.cpp Lasso.cpp LogReg.cpp)
target_link_libraries(lhac ${BLAS_LIB}) 